//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GardenLover.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GoodJobEntities : DbContext
    {
        public GoodJobEntities()
            : base("name=GoodJobEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<kAverageMark> kAverageMarks { get; set; }
        public virtual DbSet<kCompe> kCompes { get; set; }
        public virtual DbSet<kCompeForAll> kCompeForAlls { get; set; }
        public virtual DbSet<kCompeForSome> kCompeForSomes { get; set; }
        public virtual DbSet<kJob> kJobs { get; set; }
        public virtual DbSet<kJobDetail> kJobDetails { get; set; }
        public virtual DbSet<kNextPlan> kNextPlans { get; set; }
        public virtual DbSet<kNextPlanDetail> kNextPlanDetails { get; set; }
        public virtual DbSet<kRate> kRates { get; set; }
        public virtual DbSet<kRateForAll> kRateForAlls { get; set; }
        public virtual DbSet<kRelationType> kRelationTypes { get; set; }
        public virtual DbSet<kRelationTypeForAll> kRelationTypeForAlls { get; set; }
        public virtual DbSet<kReport> kReports { get; set; }
        public virtual DbSet<kReport_History> kReport_History { get; set; }
        public virtual DbSet<kState> kStates { get; set; }
        public virtual DbSet<kStep> kSteps { get; set; }
        public virtual DbSet<kStepForAll> kStepForAlls { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<vApp> vApps { get; set; }
        public virtual DbSet<vAppFunction> vAppFunctions { get; set; }
        public virtual DbSet<vBranch> vBranches { get; set; }
        public virtual DbSet<vCompany> vCompanies { get; set; }
        public virtual DbSet<vCorporation> vCorporations { get; set; }
        public virtual DbSet<vCountry> vCountries { get; set; }
        public virtual DbSet<vCurrency> vCurrencies { get; set; }
        public virtual DbSet<vDepartment> vDepartments { get; set; }
        public virtual DbSet<vDepartmentForAll> vDepartmentForAlls { get; set; }
        public virtual DbSet<vGrade> vGrades { get; set; }
        public virtual DbSet<vGradeForAll> vGradeForAlls { get; set; }
        public virtual DbSet<vLanguage> vLanguages { get; set; }
        public virtual DbSet<vLoginUser> vLoginUsers { get; set; }
        public virtual DbSet<vRank> vRanks { get; set; }
        public virtual DbSet<vRankForAll> vRankForAlls { get; set; }
        public virtual DbSet<vRelationType> vRelationTypes { get; set; }
        public virtual DbSet<vRelationTypeForAll> vRelationTypeForAlls { get; set; }
        public virtual DbSet<vRole> vRoles { get; set; }
        public virtual DbSet<vRoleForAll> vRoleForAlls { get; set; }
        public virtual DbSet<vUserInfo> vUserInfoes { get; set; }
        public virtual DbSet<ckJob> ckJobs { get; set; }
        public virtual DbSet<ckJobDetail> ckJobDetails { get; set; }
        public virtual DbSet<ckReport> ckReports { get; set; }
    
        public virtual int CheckIsBOD(string userId, ObjectParameter valid)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckIsBOD", userIdParameter, valid);
        }
    
        public virtual int CheckIsReporter(string userId, string kpiReportId, ObjectParameter valid)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var kpiReportIdParameter = kpiReportId != null ?
                new ObjectParameter("KpiReportId", kpiReportId) :
                new ObjectParameter("KpiReportId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckIsReporter", userIdParameter, kpiReportIdParameter, valid);
        }
    
        public virtual int CheckRoleKpi(string managerId, Nullable<long> kpiReportId, string roleKpi, ObjectParameter valid)
        {
            var managerIdParameter = managerId != null ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(string));
    
            var kpiReportIdParameter = kpiReportId.HasValue ?
                new ObjectParameter("KpiReportId", kpiReportId) :
                new ObjectParameter("KpiReportId", typeof(long));
    
            var roleKpiParameter = roleKpi != null ?
                new ObjectParameter("RoleKpi", roleKpi) :
                new ObjectParameter("RoleKpi", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckRoleKpi", managerIdParameter, kpiReportIdParameter, roleKpiParameter, valid);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
